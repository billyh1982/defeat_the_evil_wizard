import random
    # Base Character class
class Character:
    def __init__(self, name, health, attack_power):
        self.name = name
        self.health = health
        self.attack_power = attack_power
        self.max_health = health  # Store the original health for maximum limit
        
    def attack(self, opponent):
        opponent.health -= self.attack_power
        print(f"{self.name} attacks {opponent.name} for {self.attack_power} damage!")
        if opponent.health <= 0:
            print(f"{opponent.name} has been defeated!")

    def display_stats(self):
        print(f"{self.name}'s Stats - Health: {self.health}/{self.max_health}, Attack Power: {self.attack_power}")

    # Add your heal method here
    #added a healing fuction for all sub-classes to pull from 
    #also added random fuction
    def heal(self):
        healing_points = random.randint(15, 20) 
        self.health = min(self.health + healing_points, self.max_health) 
        print(f"{self.name} heals for {healing_points} health points!")

# Warrior class (inherits from Character)
class Warrior(Character):
    def __init__(self, name):
        super().__init__(name, health=150, attack_power=30 )

# add randomizer to this character for a more random game     
    def special_attack(self, opponent):
        special_attack = random.randint(25, 50)
        opponent.health -= special_attack
        print(f"{self.name} delivers crushing blows to {opponent.name} for {special_attack} damage!") 
        if opponent.health <= 0 :
            print(f"{opponent.name}is no longer a threat thank you brave {self.name}")
    
# Mage class (inherits from Character)
class Mage(Character):
    def __init__(self, name):
        super().__init__(name, health=100, attack_power=40)  # Boost attack power
    
    def special_attack(self, opponent):
        special_attack = random.randint(35, 50)
        opponent.health -= special_attack
        print(f"{self.name} raises their wand and casts a horrible spell against {opponent.name} for {special_attack} damage!") 
        if opponent.health <= 0 :
            print(f"{opponent.name}is no longer a threat thank you brave {self.name}")
    
class orc(Character):
    def __init__(self, name):
        super().__init__(name, health=50, attack_power=60)  # Boost attack power
    
    def special_attack(self, opponent):
        special_attack = random.randint(50, 75)
        opponent.health -= special_attack
        print(f"{self.name} the orc has sliced withhis tuskes the {opponent.name} for {special_attack} damage!") 
        if opponent.health <= 0 :
            print(f"{opponent.name}is no longer a threat thank you {self.name} the orc")


class berserker(Character):
    def __init__(self, name):
        super().__init__(name, health=25, attack_power=75)  # Boost attack power
    
    def special_attack(self, opponent):
        special_attack = random.randint(100, 125)
        opponent.health -= special_attack
        print(f"{self.name} the berserker has tried to smash {opponent.name} with rage from the ancestors for {special_attack} damage!") 
        if opponent.health <= 0 :
            print(f"{opponent.name}is no longer a threat thank you {self.name} the berserker ")


# EvilWizard class (inherits from Character)
class EvilWizard(Character):
    def __init__(self, name):
        super().__init__(name, health=150, attack_power=20)  # Lower attack power
    
    # Evil Wizard's special ability: it can regenerate health
    def regenerate(self):
        self.health += 10  # Lower regeneration amount
        print(f"{self.name} regenerates 10 health! Current health: {self.health}")

# Function to create player character based on user input
def create_character():
    print("Choose your character class:")
    print("1. Warrior")
    print("2. Mage")
    print("3. orc")  
    print("4. berserker")
    
    class_choice = input("Enter the number of your class choice: ")
    name = input("Enter your character's name: ")

    if class_choice == '1':
        return Warrior(name)
    elif class_choice == '2':
        return Mage(name)
    elif class_choice == '3':
        return orc(name)
    elif class_choice == '4':
        return berserker(name)
    else:
        print("Invalid choice. Defaulting to Warrior.")
        return Warrior(name)

# Battle function with user menu for actions
def battle(player, wizard):
    while wizard.health > 0 and player.health > 0:
        print("\n--- Your Turn ---")
        print("1. Attack")
        print("2. Use Special_attack")
        print("3. Heal")
        print("4. View Stats")
        
        choice = input("Choose an action: ")

        if choice == '1':
            player.attack(wizard)
        elif choice == '2':
            player.special_attack(wizard)  # Implement this
        elif choice == '3':
            player.heal()  # Implement this
        elif choice == '4':
            player.display_stats()
        else:
            print("Invalid choice, try again.")
            continue

        # Evil Wizard's turn to attack and regenerate
        if wizard.health > 0:
            wizard.regenerate()
            wizard.attack(player)

        if player.health <= 0:
            print(f"{player.name} has been defeated!")
            break

    if wizard.health <= 0:
        print(f"The wizard {wizard.name} has been defeated by {player.name}!")

# Main function to handle the flow of the game
def main():
    # Character creation phase
    player = create_character()

    # Evil Wizard is created
    wizard = EvilWizard("The Dark Wizard")

    # Start the battle
    battle(player, wizard)

if __name__ == "__main__":
    main()